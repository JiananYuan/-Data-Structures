#include <iostream>
#include <stdio.h>
#define MAX 100005
using namespace std;
typedef int Element;
//简单选择排序，下标从1开始
void SimpleSelectSort(Element a[],int n) {
    for(int i=1;i<=n-1;i++) {
        int minid = i;
        for(int j=i+1;j<=n;j++) {
            if(a[j] < a[minid]) minid = j;
        }
        if(minid != i) swap(a[minid],a[i]);
    }
}

//简单插入排序，下标从1开始
void SimpleInsertSort(Element a[],int n) {
    for(int i=1;i<=n;i++) {
        Element tmp = a[i];
        int j = i;
        for(;j > 1 && a[j-1] > tmp;j--) a[j] = a[j-1];
        a[j] = tmp;
    }
}

//希尔排序，下标从1开始
void ShellSort(Element a[],int n) {

}

//冒泡排序，下标从1开始
void BubbleSort(Element a[],int n) {
    for(int i=1;i<=n-1;i++) {
        int tag = 0;
        for(int j=1;j<=n-i;j++) {
            if(a[j] > a[j+1]) {
                swap(a[j],a[j+1]);
                tag = 1;
            }
        }
        if(tag == 0) break;
    }
}

//快速排序，下标从1开始
//void QuickSort(Element a[],int left,int right) {
//    int l = left, r = right;
//    int mid = (left+right)/2;
//    do {
//        while(a[l] < a[mid]) l++;
//        while(a[r] > a[mid]) r--;
//        if(l <= r) {
//            swap(a[l],a[r]);
//            l++,r--;
//        }
//    } while(l <= r);
//    if(left < r)  QuickSort(a,left,r);
//    if(l < right) QuickSort(a,l,right);
//}
void QuickSort(int a[],int l,int r)//应用二分思想
{
    int mid=a[(l+r)/2];//中间数
    int i=l,j=r;
    do{
        while(a[i]<mid) i++;//查找左半部分比中间数大的数
        while(a[j]>mid) j--;//查找右半部分比中间数小的数
        if(i<=j)//如果有一组不满足排序条件（左小右大）的数
        {
            swap(a[i],a[j]);//交换
            i++;
            j--;
        }
    }while(i<=j);//这里注意要有=
    if(l<j) QuickSort(a,l,j);//递归搜索左半部分
    if(i<r) QuickSort(a,i,r);//递归搜索右半部分
}


//测试函数
void test() {
    //int a[11] = {0,32,45,63,-9,0,199,32,88,45,2};
    int n; cin>>n;
    int a[MAX];
    for(int i=1;i<=n;i++) cin>>a[i];//scanf("%d",&a[i]);
    QuickSort(a,1,n);
    printf("%d",a[1]);
    for(int i=2;i<=n;i++) {
        printf(" %d",a[i]);
    }
    cout<<endl;
}
int main() {
    test();
    return 0;
}
